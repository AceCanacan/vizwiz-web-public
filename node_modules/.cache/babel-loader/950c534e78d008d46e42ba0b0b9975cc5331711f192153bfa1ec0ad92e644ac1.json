{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/my-react-app/src/components/header_interpret.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport 'src/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = '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'; // Replace with your actual API key\n\nconst Header_Interpret = ({\n  csvHeaders,\n  onInterpretationComplete\n}) => {\n  _s();\n  const [interpretations, setInterpretations] = useState({});\n  const [datasetInterpretation, setDatasetInterpretation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [operationCompleted, setOperationCompleted] = useState(false);\n  const interpretHeader = useCallback(async header => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Interpret the CSV column header \"${header}\" in a very brief but detailed manner. Not more than two sentences`\n      };\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [systemMessage]\n      }, {\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      var _error$response;\n      console.error('Error response from OpenAI:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      return 'Error interpreting header';\n    }\n  }, []);\n  const interpretDataset = useCallback(async () => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Provide an overall interpretation of a dataset in 2 sentences: ${csvHeaders.join(', ')}`\n      };\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [systemMessage]\n      }, {\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      var _error$response2;\n      console.error('Error response from OpenAI:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      return 'Error interpreting dataset';\n    }\n  }, [csvHeaders]);\n  const interpretHeadersAndDataset = async () => {\n    if (operationCompleted) {\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const headerPromises = csvHeaders.map(header => interpretHeader(header));\n      const [headerResults, datasetResult] = await Promise.all([Promise.all(headerPromises), interpretDataset()]);\n      const newInterpretations = {};\n      csvHeaders.forEach((header, index) => {\n        newInterpretations[header] = headerResults[index];\n      });\n      setInterpretations(newInterpretations);\n      setDatasetInterpretation(datasetResult);\n\n      // Inform the parent component that the interpretation is complete\n      if (onInterpretationComplete) {\n        onInterpretationComplete(datasetResult, newInterpretations);\n      }\n      setLoading(false);\n      setOperationCompleted(true);\n    } catch (e) {\n      setError('An error occurred while interpreting the data.');\n      setLoading(false);\n    }\n    setLoading(false);\n  };\n  useEffect(() => {\n    interpretHeadersAndDataset();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading interpretations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }, this), datasetInterpretation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Overall Dataset Interpretation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: datasetInterpretation,\n        onChange: e => setDatasetInterpretation(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), Object.keys(interpretations).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Header Interpretations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), Object.entries(interpretations).map(([header, interpretation]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [header, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: interpretation,\n          onChange: e => {\n            setInterpretations({\n              ...interpretations,\n              [header]: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this)]\n      }, header, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Header_Interpret, \"jhIFuXdr5O8Xhq83AzYPxGWVEww=\");\n_c = Header_Interpret;\nexport default Header_Interpret;\nvar _c;\n$RefreshReg$(_c, \"Header_Interpret\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","API_KEY","Header_Interpret","csvHeaders","onInterpretationComplete","_s","interpretations","setInterpretations","datasetInterpretation","setDatasetInterpretation","loading","setLoading","error","setError","operationCompleted","setOperationCompleted","interpretHeader","header","systemMessage","role","content","response","post","model","messages","headers","Authorization","data","choices","message","trim","_error$response","console","interpretDataset","join","_error$response2","interpretHeadersAndDataset","headerPromises","map","headerResults","datasetResult","Promise","all","newInterpretations","forEach","index","e","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","Object","keys","length","entries","interpretation","type","_c","$RefreshReg$"],"sources":["/Users/acecanacan/my-react-app/src/components/header_interpret.js"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport axios from 'axios';\nimport 'src/App.css';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = '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'; // Replace with your actual API key\n\nconst Header_Interpret = ({ csvHeaders, onInterpretationComplete }) => {\n  const [interpretations, setInterpretations] = useState({});\n  const [datasetInterpretation, setDatasetInterpretation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [operationCompleted, setOperationCompleted] = useState(false);\n\n  const interpretHeader = useCallback(async (header) => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Interpret the CSV column header \"${header}\" in a very brief but detailed manner. Not more than two sentences`,\n      };\n      const response = await axios.post(\n        API_URL,\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [systemMessage],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      console.error('Error response from OpenAI:', error.response?.data);\n      return 'Error interpreting header';\n    }\n  }, []);\n\n  const interpretDataset = useCallback(async () => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Provide an overall interpretation of a dataset in 2 sentences: ${csvHeaders.join(', ')}`,\n      };\n      const response = await axios.post(\n        API_URL,\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [systemMessage],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      console.error('Error response from OpenAI:', error.response?.data);\n      return 'Error interpreting dataset';\n    }\n  }, [csvHeaders]);\n\n\n  const interpretHeadersAndDataset = async () => {\n    if (operationCompleted) {\n      return;\n    }\n    setLoading(true);\n    setError(null);\n\n    try {\n      const headerPromises = csvHeaders.map(header => interpretHeader(header));\n      const [headerResults, datasetResult] = await Promise.all([\n        Promise.all(headerPromises),\n        interpretDataset(),\n      ]);\n\n      const newInterpretations = {};\n      csvHeaders.forEach((header, index) => {\n        newInterpretations[header] = headerResults[index];\n      });\n\n      setInterpretations(newInterpretations);\n      setDatasetInterpretation(datasetResult);\n\n        // Inform the parent component that the interpretation is complete\n  if (onInterpretationComplete) {\n    onInterpretationComplete(datasetResult, newInterpretations);\n  }\n\n  setLoading(false);\n  setOperationCompleted(true); \n      \n    } catch (e) {\n      setError('An error occurred while interpreting the data.');\n      setLoading(false);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    interpretHeadersAndDataset();\n  }, []);  \n\n  return (\n    <>\n      {loading && <p>Loading interpretations...</p>}\n      {datasetInterpretation && (\n        <div>\n          <h2>Overall Dataset Interpretation</h2>\n          <textarea\n            value={datasetInterpretation}\n            onChange={(e) => setDatasetInterpretation(e.target.value)}\n          />\n        </div>\n      )}\n      {Object.keys(interpretations).length > 0 && (\n        <div>\n          <h2>Header Interpretations</h2>\n          {Object.entries(interpretations).map(([header, interpretation]) => (\n            <div key={header}>\n              <strong>{header}:</strong>\n              <input\n                type=\"text\"\n                value={interpretation}\n                onChange={(e) => {\n                  setInterpretations({\n                    ...interpretations,\n                    [header]: e.target.value,\n                  });\n                }}\n              />\n            </div>\n          ))}\n        </div>\n      )}\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Header_Interpret;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}