{"ast":null,"code":"'use strict';\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === 'm') throw new TypeError('Private method is not writable');\n  if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a setter');\n  if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver)) throw new TypeError('Cannot write private member to an object whose class did not declare it');\n  return kind === 'a' ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === 'a' && !f) throw new TypeError('Private accessor was defined without a getter');\n  if (typeof state === 'function' ? receiver !== state || !f : !state.has(receiver)) throw new TypeError('Cannot read private member from an object whose class did not declare it');\n  return kind === 'm' ? f : kind === 'a' ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.toBase64 = exports.getHeader = exports.isHeadersProtocol = exports.isRunningInBrowser = exports.debug = exports.hasOwn = exports.isEmptyObj = exports.maybeCoerceBoolean = exports.maybeCoerceFloat = exports.maybeCoerceInteger = exports.coerceBoolean = exports.coerceFloat = exports.coerceInteger = exports.readEnv = exports.ensurePresent = exports.castToError = exports.sleep = exports.safeJSON = exports.isRequestOptions = exports.createResponseHeaders = exports.PagePromise = exports.AbstractPage = exports.APIResource = exports.APIClient = exports.APIPromise = exports.createForm = exports.multipartFormRequestOptions = exports.maybeMultipartFormRequestOptions = void 0;\nconst version_1 = require('./version.js');\nconst streaming_1 = require('./streaming.js');\nconst error_1 = require('./error.js');\nconst agent_1 = require('openai/_shims/agent');\nconst fetch_1 = require('openai/_shims/fetch');\nconst uploads_1 = require('./uploads.js');\nvar uploads_2 = require('./uploads.js');\nObject.defineProperty(exports, 'maybeMultipartFormRequestOptions', {\n  enumerable: true,\n  get: function () {\n    return uploads_2.maybeMultipartFormRequestOptions;\n  }\n});\nObject.defineProperty(exports, 'multipartFormRequestOptions', {\n  enumerable: true,\n  get: function () {\n    return uploads_2.multipartFormRequestOptions;\n  }\n});\nObject.defineProperty(exports, 'createForm', {\n  enumerable: true,\n  get: function () {\n    return uploads_2.createForm;\n  }\n});\nconst MAX_RETRIES = 2;\nasync function defaultParseResponse(props) {\n  const {\n    response\n  } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new streaming_1.Stream(response, props.controller);\n  }\n  const contentType = response.headers.get('content-type');\n  if (contentType === null || contentType === void 0 ? void 0 : contentType.includes('application/json')) {\n    const json = await response.json();\n    debug('response', response.status, response.url, response.headers, json);\n    return json;\n  }\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nclass APIPromise extends Promise {\n  constructor(responsePromise, parseResponse = defaultParseResponse) {\n    super(resolve => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null);\n    });\n    this.responsePromise = responsePromise;\n    this.parseResponse = parseResponse;\n  }\n  _thenUnwrap(transform) {\n    return new APIPromise(this.responsePromise, async props => transform(await this.parseResponse(props)));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse() {\n    return this.responsePromise.then(p => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse() {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return {\n      data,\n      response\n    };\n  }\n  parse() {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n  then(onfulfilled, onrejected) {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n  catch(onrejected) {\n    return this.parse().catch(onrejected);\n  }\n  finally(onfinally) {\n    return this.parse().finally(onfinally);\n  }\n}\nexports.APIPromise = APIPromise;\nclass APIClient {\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000,\n    // 10 minutes\n    httpAgent,\n    fetch: overridenFetch\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries !== null && maxRetries !== void 0 ? maxRetries : MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n    this.fetch = overridenFetch !== null && overridenFetch !== void 0 ? overridenFetch : fetch_1.fetch;\n  }\n  authHeaders(opts) {\n    return {};\n  }\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  defaultHeaders(opts) {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts)\n    };\n  }\n  /**\n   * Override this to add your own headers validation:\n   */\n  validateHeaders(headers, customHeaders) {}\n  defaultIdempotencyKey() {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n  get(path, opts) {\n    return this.methodRequest('get', path, opts);\n  }\n  post(path, opts) {\n    return this.methodRequest('post', path, opts);\n  }\n  patch(path, opts) {\n    return this.methodRequest('patch', path, opts);\n  }\n  put(path, opts) {\n    return this.methodRequest('put', path, opts);\n  }\n  delete(path, opts) {\n    return this.methodRequest('delete', path, opts);\n  }\n  methodRequest(method, path, opts) {\n    return this.request(Promise.resolve(opts).then(opts => ({\n      method,\n      path,\n      ...opts\n    })));\n  }\n  getAPIList(path, Page, opts) {\n    return this.requestAPIList(Page, {\n      method: 'get',\n      path,\n      ...opts\n    });\n  }\n  calculateContentLength(body) {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n    return null;\n  }\n  buildRequest(options) {\n    var _a, _b, _c, _d, _e, _f;\n    const {\n      method,\n      path,\n      query,\n      headers = {}\n    } = options;\n    const body = (0, uploads_1.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n    const contentLength = this.calculateContentLength(body);\n    const url = this.buildURL(path, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.timeout;\n    const httpAgent = (_c = (_b = options.httpAgent) !== null && _b !== void 0 ? _b : this.httpAgent) !== null && _c !== void 0 ? _c : (0, agent_1.getDefaultAgent)(url);\n    const minAgentTimeout = timeout + 1000;\n    if (typeof ((_d = httpAgent === null || httpAgent === void 0 ? void 0 : httpAgent.options) === null || _d === void 0 ? void 0 : _d.timeout) === 'number' && minAgentTimeout > ((_e = httpAgent.options.timeout) !== null && _e !== void 0 ? _e : 0)) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      httpAgent.options.timeout = minAgentTimeout;\n    }\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n    const reqHeaders = {\n      ...(contentLength && {\n        'Content-Length': contentLength\n      }),\n      ...this.defaultHeaders(options),\n      ...headers\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if ((0, uploads_1.isMultipartBody)(options.body) && !fetch_1.isPolyfilled) {\n      delete reqHeaders['Content-Type'];\n    }\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach(key => reqHeaders[key] === null && delete reqHeaders[key]);\n    const req = {\n      method,\n      ...(body && {\n        body: body\n      }),\n      headers: reqHeaders,\n      ...(httpAgent && {\n        agent: httpAgent\n      }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: (_f = options.signal) !== null && _f !== void 0 ? _f : null\n    };\n    this.validateHeaders(reqHeaders, headers);\n    return {\n      req,\n      url,\n      timeout\n    };\n  }\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  async prepareRequest(request, {\n    url,\n    options\n  }) {}\n  parseHeaders(headers) {\n    return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map(header => [...header])) : {\n      ...headers\n    };\n  }\n  makeStatusError(status, error, message, headers) {\n    return error_1.APIError.generate(status, error, message, headers);\n  }\n  request(options, remainingRetries = null) {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n  async makeRequest(optionsInput, retriesRemaining) {\n    var _a, _b, _c;\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n    }\n    const {\n      req,\n      url,\n      timeout\n    } = this.buildRequest(options);\n    await this.prepareRequest(req, {\n      url,\n      options\n    });\n    debug('request', url, options, req.headers);\n    if ((_b = options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {\n      throw new error_1.APIUserAbortError();\n    }\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(exports.castToError);\n    if (response instanceof Error) {\n      if ((_c = options.signal) === null || _c === void 0 ? void 0 : _c.aborted) {\n        throw new error_1.APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new error_1.APIConnectionTimeoutError();\n      }\n      throw new error_1.APIConnectionError({\n        cause: response\n      });\n    }\n    const responseHeaders = (0, exports.createResponseHeaders)(response.headers);\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n      const errText = await response.text().catch(() => 'Unknown');\n      const errJSON = (0, exports.safeJSON)(errText);\n      const errMessage = errJSON ? undefined : errText;\n      debug('response', response.status, url, responseHeaders, errMessage);\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n    return {\n      response,\n      options,\n      controller\n    };\n  }\n  requestAPIList(Page, options) {\n    const request = this.makeRequest(options, null);\n    return new PagePromise(this, request, Page);\n  }\n  buildURL(path, query) {\n    const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = {\n        ...defaultQuery,\n        ...query\n      };\n    }\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n    return url.toString();\n  }\n  stringifyQuery(query) {\n    return Object.entries(query).filter(([_, value]) => typeof value !== 'undefined').map(([key, value]) => {\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n      }\n      if (value === null) {\n        return `${encodeURIComponent(key)}=`;\n      }\n      throw new Error(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n    }).join('&');\n  }\n  async fetchWithTimeout(url, init, ms, controller) {\n    const {\n      signal,\n      ...options\n    } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n    const timeout = setTimeout(() => controller.abort(), ms);\n    return this.getRequestClient().fetch(url, {\n      signal: controller.signal,\n      ...options\n    }).finally(() => {\n      clearTimeout(timeout);\n    });\n  }\n  getRequestClient() {\n    return {\n      fetch: this.fetch\n    };\n  }\n  shouldRetry(response) {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n    return false;\n  }\n  async retryRequest(options, retriesRemaining, responseHeaders) {\n    var _a;\n    retriesRemaining -= 1;\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    //\n    // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n    const retryAfter = parseInt((responseHeaders === null || responseHeaders === void 0 ? void 0 : responseHeaders['retry-after']) || '');\n    const maxRetries = (_a = options.maxRetries) !== null && _a !== void 0 ? _a : this.maxRetries;\n    const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n    await (0, exports.sleep)(timeout);\n    return this.makeRequest(options, retriesRemaining);\n  }\n  calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says.\n    if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n      return retryAfter;\n    }\n    const numRetries = maxRetries - retriesRemaining;\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n    return sleepSeconds + jitter;\n  }\n  getUserAgent() {\n    return `${this.constructor.name}/JS ${version_1.VERSION}`;\n  }\n}\nexports.APIClient = APIClient;\nclass APIResource {\n  constructor(client) {\n    this.client = client;\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n}\nexports.APIResource = APIResource;\nclass AbstractPage {\n  constructor(client, response, body, options) {\n    _AbstractPage_client.set(this, void 0);\n    __classPrivateFieldSet(this, _AbstractPage_client, client, 'f');\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n  hasNextPage() {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n  async getNextPage() {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new Error('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n    }\n    const nextOptions = {\n      ...this.options\n    };\n    if ('params' in nextInfo) {\n      nextOptions.query = {\n        ...nextOptions.query,\n        ...nextInfo.params\n      };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await __classPrivateFieldGet(this, _AbstractPage_client, 'f').requestAPIList(this.constructor, nextOptions);\n  }\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n  async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\nexports.AbstractPage = AbstractPage;\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nclass PagePromise extends APIPromise {\n  constructor(client, request, Page) {\n    super(request, async props => new Page(client, props.response, await defaultParseResponse(props), props.options));\n  }\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\nexports.PagePromise = PagePromise;\nconst createResponseHeaders = headers => {\n  return new Proxy(Object.fromEntries(\n  // @ts-ignore\n  headers.entries()), {\n    get(target, name) {\n      const key = name.toString();\n      return target[key.toLowerCase()] || target[key];\n    }\n  });\n};\nexports.createResponseHeaders = createResponseHeaders;\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true\n};\nconst isRequestOptions = obj => {\n  return typeof obj === 'object' && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every(k => hasOwn(requestOptionsKeys, k));\n};\nexports.isRequestOptions = isRequestOptions;\nconst getPlatformProperties = () => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': version_1.VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': version_1.VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': version_1.VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version\n    };\n  }\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': version_1.VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version\n    };\n  }\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': version_1.VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown'\n  };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n  // NOTE: The order matters here!\n  const browserPatterns = [{\n    key: 'edge',\n    pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'chrome',\n    pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'firefox',\n    pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'safari',\n    pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n  }];\n  // Find the FIRST matching browser\n  for (const {\n    key,\n    pattern\n  } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n      return {\n        browser: key,\n        version: `${major}.${minor}.${patch}`\n      };\n    }\n  }\n  return null;\n}\nconst normalizeArch = arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\nconst normalizePlatform = platform => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n  platform = platform.toLowerCase();\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n  return _platformHeaders !== null && _platformHeaders !== void 0 ? _platformHeaders : _platformHeaders = getPlatformProperties();\n};\nconst safeJSON = text => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\nexports.safeJSON = safeJSON;\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = url => {\n  return startsWithSchemeRegexp.test(url);\n};\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\nexports.sleep = sleep;\nconst validatePositiveInteger = (name, n) => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new Error(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new Error(`${name} must be a positive integer`);\n  }\n  return n;\n};\nconst castToError = err => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\nexports.castToError = castToError;\nconst ensurePresent = value => {\n  if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\nexports.ensurePresent = ensurePresent;\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nconst readEnv = env => {\n  var _a, _b, _c, _d;\n  if (typeof process !== 'undefined') {\n    return (_b = (_a = process.env) === null || _a === void 0 ? void 0 : _a[env]) !== null && _b !== void 0 ? _b : undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return (_d = (_c = Deno.env) === null || _c === void 0 ? void 0 : _c.get) === null || _d === void 0 ? void 0 : _d.call(_c, env);\n  }\n  return undefined;\n};\nexports.readEnv = readEnv;\nconst coerceInteger = value => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexports.coerceInteger = coerceInteger;\nconst coerceFloat = value => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexports.coerceFloat = coerceFloat;\nconst coerceBoolean = value => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\nexports.coerceBoolean = coerceBoolean;\nconst maybeCoerceInteger = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return (0, exports.coerceInteger)(value);\n};\nexports.maybeCoerceInteger = maybeCoerceInteger;\nconst maybeCoerceFloat = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return (0, exports.coerceFloat)(value);\n};\nexports.maybeCoerceFloat = maybeCoerceFloat;\nconst maybeCoerceBoolean = value => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return (0, exports.coerceBoolean)(value);\n};\nexports.maybeCoerceBoolean = maybeCoerceBoolean;\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\nexports.isEmptyObj = isEmptyObj;\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nexports.hasOwn = hasOwn;\nfunction debug(action, ...args) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\nexports.debug = debug;\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n};\nconst isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\nexports.isRunningInBrowser = isRunningInBrowser;\nconst isHeadersProtocol = headers => {\n  return typeof (headers === null || headers === void 0 ? void 0 : headers.get) === 'function';\n};\nexports.isHeadersProtocol = isHeadersProtocol;\nconst getHeader = (headers, key) => {\n  const lowerKey = key.toLowerCase();\n  if ((0, exports.isHeadersProtocol)(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\nexports.getHeader = getHeader;\n/**\n * Encodes a string to Base64 format.\n */\nconst toBase64 = str => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n  throw new Error('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexports.toBase64 = toBase64;","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","_AbstractPage_client","exports","toBase64","getHeader","isHeadersProtocol","isRunningInBrowser","debug","hasOwn","isEmptyObj","maybeCoerceBoolean","maybeCoerceFloat","maybeCoerceInteger","coerceBoolean","coerceFloat","coerceInteger","readEnv","ensurePresent","safeJSON","isRequestOptions","createResponseHeaders","PagePromise","createForm","multipartFormRequestOptions","maybeMultipartFormRequestOptions","version_1","require","error_1","agent_1","uploads_2","defineProperty","defaultParseResponse","props","response","options","stream","streaming_1","Stream","controller","contentType","headers","includes","json","status","url","text","APIPromise","Promise","constructor","responsePromise","parseResponse","resolve","_thenUnwrap","transform","asResponse","withResponse","data","all","parse","parsedPromise","then","onfulfilled","onrejected","catch","finally","onfinally","baseURL","maxRetries","validatePositiveInteger","MAX_RETRIES","timeout","httpAgent","overridenFetch","fetch_1","fetch","authHeaders","opts","defaultHeaders","getUserAgent","validateHeaders","customHeaders","defaultIdempotencyKey","uuid4","methodRequest","path","method","request","calculateContentLength","body","Buffer","byteLength","toString","TextEncoder","encoded","encoder","encode","length","buildRequest","_a","_b","_c","_d","_e","_f","uploads_1","isMultipartBody","JSON","stringify","contentLength","buildURL","query","getDefaultAgent","minAgentTimeout","idempotencyHeader","idempotencyKey","reqHeaders","isPolyfilled","forEach","key","req","agent","signal","prepareRequest","parseHeaders","Symbol","iterator","Object","fromEntries","Array","from","map","header","makeStatusError","error","message","APIError","generate","remainingRetries","makeRequest","optionsInput","retriesRemaining","aborted","APIUserAbortError","AbortController","fetchWithTimeout","castToError","Error","retryRequest","name","APIConnectionTimeoutError","APIConnectionError","cause","responseHeaders","ok","errText","errJSON","errMessage","undefined","err","requestAPIList","Page","URL","endsWith","startsWith","slice","defaultQuery","search","stringifyQuery","entries","filter","_","encodeURIComponent","join","init","ms","addEventListener","abort","setTimeout","getRequestClient","clearTimeout","shouldRetry","shouldRetryHeader","parseInt","calculateRetryTimeoutSeconds","retryAfter","sleep","initialRetryDelay","maxRetryDelay","jitter","Math","random","sleepSeconds","VERSION","client","bind","post","patch","put","delete","getAPIList","APIResource","AbstractPage","set","__classPrivateFieldSet","hasNextPage","items","getPaginatedItems","nextPageInfo","getNextPage","nextInfo","nextOptions","params","searchParams","iterPages","page","WeakMap","asyncIterator","item","Proxy","target","toLowerCase","obj","keys","every","k","requestOptionsKeys","getPlatformProperties","Deno","build","normalizePlatform","os","normalizeArch","arch","version","EdgeRuntime","process","prototype","platform","browserInfo","getBrowserInfo","browser","navigator","browserPatterns","pattern","match","exec","userAgent","major","minor","_platformHeaders","getPlatformHeaders","startsWithSchemeRegexp","RegExp","isAbsoluteURL","test","n","Number","isInteger","env","round","parseFloat"],"sources":["/Users/acecanacan/my-react-app/node_modules/openai/src/core.ts"],"sourcesContent":["import { VERSION } from './version.js';\nimport { Stream } from './streaming.js';\nimport { APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError } from './error.js';\nimport type { Readable } from './_shims/node-readable.js';\nimport { getDefaultAgent, type Agent } from './_shims/agent.js';\nimport {\n  fetch,\n  isPolyfilled as fetchIsPolyfilled,\n  type RequestInfo,\n  type RequestInit,\n  type Response,\n  type HeadersInit,\n} from './_shims/fetch.js';\nexport { type Response };\nimport { isMultipartBody } from './uploads.js';\nexport {\n  maybeMultipartFormRequestOptions,\n  multipartFormRequestOptions,\n  createForm,\n  type Uploadable,\n} from './uploads.js';\n\nconst MAX_RETRIES = 2;\n\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\ntype APIResponseProps = {\n  response: Response;\n  options: FinalRequestOptions;\n  controller: AbortController;\n};\n\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\n  const { response } = props;\n  if (props.options.stream) {\n    // Note: there is an invariant here that isn't represented in the type system\n    // that if you set `stream: true` the response type must also be `Stream<T>`\n    return new Stream(response, props.controller) as any;\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (contentType?.includes('application/json')) {\n    const json = await response.json();\n\n    debug('response', response.status, response.url, response.headers, json);\n\n    return json as T;\n  }\n\n  // TODO handle blob, arraybuffer, other content types, etc.\n  const text = await response.text();\n  debug('response', response.status, response.url, response.headers, text);\n  return text as any as T;\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<T> {\n  private parsedPromise: Promise<T> | undefined;\n\n  constructor(\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport abstract class APIClient {\n  baseURL: string;\n  maxRetries: number;\n  timeout: number;\n  httpAgent: Agent | undefined;\n\n  private fetch: Fetch;\n  protected idempotencyHeader?: string;\n\n  constructor({\n    baseURL,\n    maxRetries,\n    timeout = 600000, // 10 minutes\n    httpAgent,\n    fetch: overridenFetch,\n  }: {\n    baseURL: string;\n    maxRetries?: number | undefined;\n    timeout: number | undefined;\n    httpAgent: Agent | undefined;\n    fetch: Fetch | undefined;\n  }) {\n    this.baseURL = baseURL;\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries ?? MAX_RETRIES);\n    this.timeout = validatePositiveInteger('timeout', timeout);\n    this.httpAgent = httpAgent;\n\n    this.fetch = overridenFetch ?? fetch;\n  }\n\n  protected authHeaders(opts: FinalRequestOptions): Headers {\n    return {};\n  }\n\n  /**\n   * Override this to add your own default headers, for example:\n   *\n   *  {\n   *    ...super.defaultHeaders(),\n   *    Authorization: 'Bearer 123',\n   *  }\n   */\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\n    return {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': this.getUserAgent(),\n      ...getPlatformHeaders(),\n      ...this.authHeaders(opts),\n    };\n  }\n\n  protected abstract defaultQuery(): DefaultQuery | undefined;\n\n  /**\n   * Override this to add your own headers validation:\n   */\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\n\n  protected defaultIdempotencyKey(): string {\n    return `stainless-node-retry-${uuid4()}`;\n  }\n\n  get<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('get', path, opts);\n  }\n\n  post<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('post', path, opts);\n  }\n\n  patch<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('patch', path, opts);\n  }\n\n  put<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('put', path, opts);\n  }\n\n  delete<Req extends {}, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\n    return this.methodRequest('delete', path, opts);\n  }\n\n  private methodRequest<Req extends {}, Rsp>(\n    method: HTTPMethod,\n    path: string,\n    opts?: PromiseOrValue<RequestOptions<Req>>,\n  ): APIPromise<Rsp> {\n    return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n  }\n\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    path: string,\n    Page: new (...args: any[]) => PageClass,\n    opts?: RequestOptions<any>,\n  ): PagePromise<PageClass, Item> {\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\n  }\n\n  private calculateContentLength(body: unknown): string | null {\n    if (typeof body === 'string') {\n      if (typeof Buffer !== 'undefined') {\n        return Buffer.byteLength(body, 'utf8').toString();\n      }\n\n      if (typeof TextEncoder !== 'undefined') {\n        const encoder = new TextEncoder();\n        const encoded = encoder.encode(body);\n        return encoded.length.toString();\n      }\n    }\n\n    return null;\n  }\n\n  buildRequest<Req extends {}>(\n    options: FinalRequestOptions<Req>,\n  ): { req: RequestInit; url: string; timeout: number } {\n    const { method, path, query, headers: headers = {} } = options;\n\n    const body =\n      isMultipartBody(options.body) ? options.body.body\n      : options.body ? JSON.stringify(options.body, null, 2)\n      : null;\n    const contentLength = this.calculateContentLength(body);\n\n    const url = this.buildURL(path!, query);\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\n    const timeout = options.timeout ?? this.timeout;\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n    const minAgentTimeout = timeout + 1000;\n    if (\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\n    ) {\n      // Allow any given request to bump our agent active socket timeout.\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n      // and without mutating agent we would need to create more of them.\n      // This tradeoff optimizes for performance.\n      (httpAgent as any).options.timeout = minAgentTimeout;\n    }\n\n    if (this.idempotencyHeader && method !== 'get') {\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n      headers[this.idempotencyHeader] = options.idempotencyKey;\n    }\n\n    const reqHeaders: Record<string, string> = {\n      ...(contentLength && { 'Content-Length': contentLength }),\n      ...this.defaultHeaders(options),\n      ...headers,\n    };\n    // let builtin fetch set the Content-Type for multipart bodies\n    if (isMultipartBody(options.body) && !fetchIsPolyfilled) {\n      delete reqHeaders['Content-Type'];\n    }\n\n    // Strip any headers being explicitly omitted with null\n    Object.keys(reqHeaders).forEach((key) => reqHeaders[key] === null && delete reqHeaders[key]);\n\n    const req: RequestInit = {\n      method,\n      ...(body && { body: body as any }),\n      headers: reqHeaders,\n      ...(httpAgent && { agent: httpAgent }),\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\n      // not compatible with standard web types\n      signal: options.signal ?? null,\n    };\n\n    this.validateHeaders(reqHeaders, headers);\n\n    return { req, url, timeout };\n  }\n\n  /**\n   * Used as a callback for mutating the given `RequestInit` object.\n   *\n   * This is useful for cases where you want to add certain headers based off of\n   * the request properties, e.g. `method` or `url`.\n   */\n  protected async prepareRequest(\n    request: RequestInit,\n    { url, options }: { url: string; options: FinalRequestOptions },\n  ): Promise<void> {}\n\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\n    return (\n      !headers ? {}\n      : Symbol.iterator in headers ?\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\n      : { ...headers }\n    );\n  }\n\n  protected makeStatusError(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: Headers | undefined,\n  ) {\n    return APIError.generate(status, error, message, headers);\n  }\n\n  request<Req extends {}, Rsp>(\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\n    remainingRetries: number | null = null,\n  ): APIPromise<Rsp> {\n    return new APIPromise(this.makeRequest(options, remainingRetries));\n  }\n\n  private async makeRequest(\n    optionsInput: PromiseOrValue<FinalRequestOptions>,\n    retriesRemaining: number | null,\n  ): Promise<APIResponseProps> {\n    const options = await optionsInput;\n    if (retriesRemaining == null) {\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\n    }\n\n    const { req, url, timeout } = this.buildRequest(options);\n\n    await this.prepareRequest(req, { url, options });\n\n    debug('request', url, options, req.headers);\n\n    if (options.signal?.aborted) {\n      throw new APIUserAbortError();\n    }\n\n    const controller = new AbortController();\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n\n    if (response instanceof Error) {\n      if (options.signal?.aborted) {\n        throw new APIUserAbortError();\n      }\n      if (retriesRemaining) {\n        return this.retryRequest(options, retriesRemaining);\n      }\n      if (response.name === 'AbortError') {\n        throw new APIConnectionTimeoutError();\n      }\n      throw new APIConnectionError({ cause: response });\n    }\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      if (retriesRemaining && this.shouldRetry(response)) {\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\n      }\n\n      const errText = await response.text().catch(() => 'Unknown');\n      const errJSON = safeJSON(errText);\n      const errMessage = errJSON ? undefined : errText;\n\n      debug('response', response.status, url, responseHeaders, errMessage);\n\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n      throw err;\n    }\n\n    return { response, options, controller };\n  }\n\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n    options: FinalRequestOptions,\n  ): PagePromise<PageClass, Item> {\n    const request = this.makeRequest(options, null);\n    return new PagePromise<PageClass, Item>(this, request, Page);\n  }\n\n  buildURL<Req extends Record<string, unknown>>(path: string, query: Req | null | undefined): string {\n    const url =\n      isAbsoluteURL(path) ?\n        new URL(path)\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n\n    const defaultQuery = this.defaultQuery();\n    if (!isEmptyObj(defaultQuery)) {\n      query = { ...defaultQuery, ...query } as Req;\n    }\n\n    if (query) {\n      url.search = this.stringifyQuery(query);\n    }\n\n    return url.toString();\n  }\n\n  protected stringifyQuery(query: Record<string, unknown>): string {\n    return Object.entries(query)\n      .filter(([_, value]) => typeof value !== 'undefined')\n      .map(([key, value]) => {\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n        }\n        if (value === null) {\n          return `${encodeURIComponent(key)}=`;\n        }\n        throw new Error(\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\n        );\n      })\n      .join('&');\n  }\n\n  async fetchWithTimeout(\n    url: RequestInfo,\n    init: RequestInit | undefined,\n    ms: number,\n    controller: AbortController,\n  ): Promise<Response> {\n    const { signal, ...options } = init || {};\n    if (signal) signal.addEventListener('abort', () => controller.abort());\n\n    const timeout = setTimeout(() => controller.abort(), ms);\n\n    return this.getRequestClient()\n      .fetch(url, { signal: controller.signal as any, ...options })\n      .finally(() => {\n        clearTimeout(timeout);\n      });\n  }\n\n  protected getRequestClient(): RequestClient {\n    return { fetch: this.fetch };\n  }\n\n  private shouldRetry(response: Response): boolean {\n    // Note this is not a standard header.\n    const shouldRetryHeader = response.headers.get('x-should-retry');\n\n    // If the server explicitly says whether or not to retry, obey.\n    if (shouldRetryHeader === 'true') return true;\n    if (shouldRetryHeader === 'false') return false;\n\n    // Retry on request timeouts.\n    if (response.status === 408) return true;\n\n    // Retry on lock timeouts.\n    if (response.status === 409) return true;\n\n    // Retry on rate limits.\n    if (response.status === 429) return true;\n\n    // Retry internal errors.\n    if (response.status >= 500) return true;\n\n    return false;\n  }\n\n  private async retryRequest(\n    options: FinalRequestOptions,\n    retriesRemaining: number,\n    responseHeaders?: Headers | undefined,\n  ): Promise<APIResponseProps> {\n    retriesRemaining -= 1;\n\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n    //\n    // TODO: we may want to handle the case where the header is using the http-date syntax: \"Retry-After: <http-date>\".\n    // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#syntax for details.\n    const retryAfter = parseInt(responseHeaders?.['retry-after'] || '');\n\n    const maxRetries = options.maxRetries ?? this.maxRetries;\n    const timeout = this.calculateRetryTimeoutSeconds(retriesRemaining, retryAfter, maxRetries) * 1000;\n    await sleep(timeout);\n\n    return this.makeRequest(options, retriesRemaining);\n  }\n\n  private calculateRetryTimeoutSeconds(\n    retriesRemaining: number,\n    retryAfter: number,\n    maxRetries: number,\n  ): number {\n    const initialRetryDelay = 0.5;\n    const maxRetryDelay = 2;\n\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n    // just do what it says.\n    if (Number.isInteger(retryAfter) && retryAfter <= 60) {\n      return retryAfter;\n    }\n\n    const numRetries = maxRetries - retriesRemaining;\n\n    // Apply exponential backoff, but not more than the max.\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(numRetries - 1, 2), maxRetryDelay);\n\n    // Apply some jitter, plus-or-minus half a second.\n    const jitter = Math.random() - 0.5;\n\n    return sleepSeconds + jitter;\n  }\n\n  private getUserAgent(): string {\n    return `${this.constructor.name}/JS ${VERSION}`;\n  }\n}\n\nexport class APIResource {\n  protected client: APIClient;\n  constructor(client: APIClient) {\n    this.client = client;\n\n    this.get = client.get.bind(client);\n    this.post = client.post.bind(client);\n    this.patch = client.patch.bind(client);\n    this.put = client.put.bind(client);\n    this.delete = client.delete.bind(client);\n    this.getAPIList = client.getAPIList.bind(client);\n  }\n\n  protected get: APIClient['get'];\n  protected post: APIClient['post'];\n  protected patch: APIClient['patch'];\n  protected put: APIClient['put'];\n  protected delete: APIClient['delete'];\n  protected getAPIList: APIClient['getAPIList'];\n}\n\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\n\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\n  #client: APIClient;\n  protected options: FinalRequestOptions;\n\n  protected response: Response;\n  protected body: unknown;\n\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\n    this.#client = client;\n    this.options = options;\n    this.response = response;\n    this.body = body;\n  }\n\n  /**\n   * @deprecated Use nextPageInfo instead\n   */\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\n  abstract nextPageInfo(): PageInfo | null;\n\n  abstract getPaginatedItems(): Item[];\n\n  hasNextPage(): boolean {\n    const items = this.getPaginatedItems();\n    if (!items.length) return false;\n    return this.nextPageInfo() != null;\n  }\n\n  async getNextPage(): Promise<this> {\n    const nextInfo = this.nextPageInfo();\n    if (!nextInfo) {\n      throw new Error(\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\n      );\n    }\n    const nextOptions = { ...this.options };\n    if ('params' in nextInfo) {\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n    } else if ('url' in nextInfo) {\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n      for (const [key, value] of params) {\n        nextInfo.url.searchParams.set(key, value);\n      }\n      nextOptions.query = undefined;\n      nextOptions.path = nextInfo.url.toString();\n    }\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: AbstractPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise<\n    PageClass extends AbstractPage<Item>,\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\n  >\n  extends APIPromise<PageClass>\n  implements AsyncIterable<Item>\n{\n  constructor(\n    client: APIClient,\n    request: Promise<APIResponseProps>,\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\n  ) {\n    super(\n      request,\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport const createResponseHeaders = (\n  headers: Awaited<ReturnType<Fetch>>['headers'],\n): Record<string, string> => {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries(),\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    },\n  );\n};\n\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\n\nexport type RequestClient = { fetch: Fetch };\nexport type Headers = Record<string, string | null | undefined>;\nexport type DefaultQuery = Record<string, string | undefined>;\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nexport type RequestOptions<Req extends {} = Record<string, unknown> | Readable> = {\n  method?: HTTPMethod;\n  path?: string;\n  query?: Req | undefined;\n  body?: Req | undefined;\n  headers?: Headers | undefined;\n\n  maxRetries?: number;\n  stream?: boolean | undefined;\n  timeout?: number;\n  httpAgent?: Agent;\n  signal?: AbortSignal | undefined | null;\n  idempotencyKey?: string;\n};\n\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\n  method: true,\n  path: true,\n  query: true,\n  body: true,\n  headers: true,\n\n  maxRetries: true,\n  stream: true,\n  timeout: true,\n  httpAgent: true,\n  signal: true,\n  idempotencyKey: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\n  return (\n    typeof obj === 'object' &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\nexport type FinalRequestOptions<Req extends {} = Record<string, unknown> | Readable> = RequestOptions<Req> & {\n  method: HTTPMethod;\n  path: string;\n};\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': Deno.version,\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n  // Check if Node.js\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(process.platform),\n      'X-Stainless-Arch': normalizeArch(process.arch),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': process.version,\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nconst getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n\nexport const safeJSON = (text: string) => {\n  try {\n    return JSON.parse(text);\n  } catch (err) {\n    return undefined;\n  }\n};\n\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url: string): boolean => {\n  return startsWithSchemeRegexp.test(url);\n};\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst validatePositiveInteger = (name: string, n: unknown): number => {\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\n    throw new Error(`${name} must be an integer`);\n  }\n  if (n < 0) {\n    throw new Error(`${name} must be a positive integer`);\n  }\n  return n;\n};\n\nexport const castToError = (err: any): Error => {\n  if (err instanceof Error) return err;\n  return new Error(err);\n};\n\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\n  if (value == null) throw new Error(`Expected a value to be given but received ${value} instead.`);\n  return value;\n};\n\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env: string): string | undefined => {\n  if (typeof process !== 'undefined') {\n    return process.env?.[env] ?? undefined;\n  }\n  if (typeof Deno !== 'undefined') {\n    return Deno.env?.get?.(env);\n  }\n  return undefined;\n};\n\nexport const coerceInteger = (value: unknown): number => {\n  if (typeof value === 'number') return Math.round(value);\n  if (typeof value === 'string') return parseInt(value, 10);\n\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceFloat = (value: unknown): number => {\n  if (typeof value === 'number') return value;\n  if (typeof value === 'string') return parseFloat(value);\n\n  throw new Error(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\n\nexport const coerceBoolean = (value: unknown): boolean => {\n  if (typeof value === 'boolean') return value;\n  if (typeof value === 'string') return value === 'true';\n  return Boolean(value);\n};\n\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceInteger(value);\n};\n\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceFloat(value);\n};\n\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\n  if (value === undefined) {\n    return undefined;\n  }\n  return coerceBoolean(value);\n};\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function debug(action: string, ...args: any[]) {\n  if (typeof process !== 'undefined' && process.env['DEBUG'] === 'true') {\n    console.log(`OpenAI:DEBUG:${action}`, ...args);\n  }\n}\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\nexport interface HeadersProtocol {\n  get: (header: string) => string | null | undefined;\n}\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\n\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\n  return typeof headers?.get === 'function';\n};\n\nexport const getHeader = (headers: HeadersLike, key: string): string | null | undefined => {\n  const lowerKey = key.toLowerCase();\n  if (isHeadersProtocol(headers)) return headers.get(key) || headers.get(lowerKey);\n  const value = headers[key] || headers[lowerKey];\n  if (Array.isArray(value)) {\n    if (value.length <= 1) return value[0];\n    console.warn(`Received ${value.length} entries for the ${key} header, using the first entry.`);\n    return value[0];\n  }\n  return value;\n};\n\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str: string | null | undefined): string => {\n  if (!str) return '';\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(str).toString('base64');\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(str);\n  }\n\n  throw new Error('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}