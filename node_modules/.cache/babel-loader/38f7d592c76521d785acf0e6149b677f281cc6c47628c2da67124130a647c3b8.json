{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/my-react-app/src/components/header_interpret.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nconst Header_Interpret = () => {\n  _s();\n  const configuration = new Configuration({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY\n  });\n  const openai = new OpenAIApi(configuration);\n  const [csvHeaders, setCsvHeaders] = useState([]); // Assume this will be set elsewhere\n  const [interpretations, setInterpretations] = useState({});\n  const [loading, setLoading] = useState(false);\n  const interpretHeader = async header => {\n    const result = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `Interpret the column header \"${header}\" in a CSV file.`,\n      temperature: 0.5,\n      max_tokens: 100\n    });\n    return result.data.choices[0].text.trim();\n  };\n  useEffect(() => {\n    const fetchInterpretations = async () => {\n      setLoading(true);\n      const newInterpretations = {};\n      for (const header of csvHeaders) {\n        newInterpretations[header] = await interpretHeader(header);\n      }\n      setInterpretations(newInterpretations);\n      setLoading(false);\n    };\n    if (csvHeaders.length > 0) {\n      fetchInterpretations();\n    }\n  }, [csvHeaders]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\"\n      },\n      children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading interpretations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), Object.keys(interpretations).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Interpretations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), Object.entries(interpretations).map(([header, interpretation]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [header, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), \" \", interpretation]\n      }, header, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Header_Interpret, \"MPNH7kzuUanj4ZKTQoAREv5V3V4=\");\n_c = Header_Interpret;\nexport default Header_Interpret;\nvar _c;\n$RefreshReg$(_c, \"Header_Interpret\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Configuration","OpenAIApi","require","Header_Interpret","_s","configuration","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","csvHeaders","setCsvHeaders","interpretations","setInterpretations","loading","setLoading","interpretHeader","header","result","createCompletion","model","prompt","temperature","max_tokens","data","choices","text","trim","fetchInterpretations","newInterpretations","length","children","style","display","flexDirection","justifyContent","alignItems","height","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","entries","map","interpretation","_c","$RefreshReg$"],"sources":["/Users/acecanacan/my-react-app/src/components/header_interpret.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nconst { Configuration, OpenAIApi } = require(\"openai\");\n\nconst Header_Interpret = () => {\n  const configuration = new Configuration({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  });\n\n  const openai = new OpenAIApi(configuration);\n  const [csvHeaders, setCsvHeaders] = useState([]); // Assume this will be set elsewhere\n  const [interpretations, setInterpretations] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const interpretHeader = async (header) => {\n    const result = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `Interpret the column header \"${header}\" in a CSV file.`,\n      temperature: 0.5,\n      max_tokens: 100,\n    });\n    return result.data.choices[0].text.trim();\n  };\n\n  useEffect(() => {\n    const fetchInterpretations = async () => {\n      setLoading(true);\n      const newInterpretations = {};\n\n      for (const header of csvHeaders) {\n        newInterpretations[header] = await interpretHeader(header);\n      }\n\n      setInterpretations(newInterpretations);\n      setLoading(false);\n    };\n\n    if (csvHeaders.length > 0) {\n      fetchInterpretations();\n    }\n  }, [csvHeaders]);\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n        }}\n      >\n        {/* Your existing form can stay here */}\n        {loading && <p>Loading interpretations...</p>}\n      </div>\n      {Object.keys(interpretations).length > 0 && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <h2>Interpretations</h2>\n          {Object.entries(interpretations).map(([header, interpretation]) => (\n            <div key={header}>\n              <strong>{header}:</strong> {interpretation}\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Header_Interpret;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}