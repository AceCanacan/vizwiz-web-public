{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/my-react-app/src/components/header_interpret.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Configuration,\n  OpenAIApi\n} = require(\"openai\");\nconst Header_Interpret = () => {\n  _s();\n  // Memoize the openai object to avoid re-initialization on every render\n  const openai = useMemo(() => {\n    const configuration = new Configuration({\n      apiKey: \"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\"\n    });\n    return new OpenAIApi(configuration);\n  }, []);\n  const [csvHeaders, setCsvHeaders] = useState([]); // We'll keep this assuming you will use it elsewhere\n  const [interpretations, setInterpretations] = useState({});\n  const [loading, setLoading] = useState(false);\n  const interpretHeader = useCallback(async header => {\n    const result = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `Interpret the column header \"${header}\" in a CSV file.`,\n      temperature: 0.5,\n      max_tokens: 100\n    });\n    return result.data.choices[0].text.trim();\n  }, [openai]);\n  // Added openai to the dependency array\n\n  useEffect(() => {\n    const fetchInterpretations = async () => {\n      setLoading(true);\n      const newInterpretations = {};\n      for (const header of csvHeaders) {\n        try {\n          newInterpretations[header] = await interpretHeader(header);\n        } catch (error) {\n          newInterpretations[header] = \"Error interpreting header\";\n        }\n      }\n      setInterpretations(newInterpretations);\n      setLoading(false);\n    };\n    if (csvHeaders.length > 0) {\n      fetchInterpretations();\n    }\n  }, [csvHeaders, interpretHeader]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\"\n      },\n      children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading interpretations...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), Object.keys(interpretations).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Interpretations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), Object.entries(interpretations).map(([header, interpretation]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [header, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), \" \", interpretation]\n      }, header, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Header_Interpret, \"TBB6VHrerUaCgkGM5Q8dKOGM1ng=\");\n_c = Header_Interpret;\nexport default Header_Interpret;\nvar _c;\n$RefreshReg$(_c, \"Header_Interpret\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","Fragment","_Fragment","Configuration","OpenAIApi","require","Header_Interpret","_s","openai","configuration","apiKey","csvHeaders","setCsvHeaders","interpretations","setInterpretations","loading","setLoading","interpretHeader","header","result","createCompletion","model","prompt","temperature","max_tokens","data","choices","text","trim","fetchInterpretations","newInterpretations","error","length","children","style","display","flexDirection","justifyContent","alignItems","height","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","entries","map","interpretation","_c","$RefreshReg$"],"sources":["/Users/acecanacan/my-react-app/src/components/header_interpret.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from \"react\";\nconst { Configuration, OpenAIApi } = require(\"openai\");\n\nconst Header_Interpret = () => {\n  // Memoize the openai object to avoid re-initialization on every render\n  const openai = useMemo(() => {\n    const configuration = new Configuration({\n      apiKey: \"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\",\n    });\n    return new OpenAIApi(configuration);\n  }, []);\n\n  const [csvHeaders, setCsvHeaders] = useState([]); // We'll keep this assuming you will use it elsewhere\n  const [interpretations, setInterpretations] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const interpretHeader = useCallback(async (header) => {\n    const result = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: `Interpret the column header \"${header}\" in a CSV file.`,\n      temperature: 0.5,\n      max_tokens: 100,\n    });\n    return result.data.choices[0].text.trim();\n  }, [openai]);\n // Added openai to the dependency array\n  \n\n  useEffect(() => {\n    const fetchInterpretations = async () => {\n      setLoading(true);\n      const newInterpretations = {};\n\n      for (const header of csvHeaders) {\n        try {\n          newInterpretations[header] = await interpretHeader(header);\n        } catch (error) {\n          newInterpretations[header] = \"Error interpreting header\";\n        }\n      }\n      \n\n      setInterpretations(newInterpretations);\n      setLoading(false);\n    };\n\n    if (csvHeaders.length > 0) {\n      fetchInterpretations();\n    }\n  }, [csvHeaders, interpretHeader]);\n\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n        }}\n      >\n        {/* Your existing form can stay here */}\n        {loading && <p>Loading interpretations...</p>}\n      </div>\n      {Object.keys(interpretations).length > 0 && (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <h2>Interpretations</h2>\n          {Object.entries(interpretations).map(([header, interpretation]) => (\n            <div key={header}>\n              <strong>{header}:</strong> {interpretation}\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Header_Interpret;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}