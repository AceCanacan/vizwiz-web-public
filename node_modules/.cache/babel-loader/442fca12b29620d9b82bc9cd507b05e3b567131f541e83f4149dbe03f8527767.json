{"ast":null,"code":"// import { useState, useEffect, useCallback, useMemo } from \"react\";\n// const { Configuration, OpenAIApi } = require(\"openai\");\n\n// const Header_Interpret = () => {\n//   // Memoize the openai object to avoid re-initialization on every render\n//   const openai = useMemo(() => {\n//     const configuration = new Configuration({\n//       apiKey: \"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\",\n//     });\n//     return new OpenAIApi(configuration);\n//   }, []);\n\n//   const [csvHeaders, setCsvHeaders] = useState([]); // We'll keep this assuming you will use it elsewhere\n//   const [interpretations, setInterpretations] = useState({});\n//   const [loading, setLoading] = useState(false);\n\n//   const interpretHeader = useCallback(async (header) => {\n//     const result = await openai.createCompletion({\n//       model: \"text-davinci-003\",\n//       prompt: `Interpret the column header \"${header}\" in a CSV file.`,\n//       temperature: 0.5,\n//       max_tokens: 100,\n//     });\n//     return result.data.choices[0].text.trim();\n//   }, [openai]);\n//  // Added openai to the dependency array\n\n//   useEffect(() => {\n//     const fetchInterpretations = async () => {\n//       setLoading(true);\n//       const newInterpretations = {};\n\n//       for (const header of csvHeaders) {\n//         newInterpretations[header] = await interpretHeader(header);\n//       }\n\n//       setInterpretations(newInterpretations);\n//       setLoading(false);\n//     };\n\n//     if (csvHeaders.length > 0) {\n//       fetchInterpretations();\n//     }\n//   }, [csvHeaders, interpretHeader]);\n\n//   return (\n//     <>\n//       <div\n//         style={{\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//           height: \"100vh\",\n//         }}\n//       >\n//         {/* Your existing form can stay here */}\n//         {loading && <p>Loading interpretations...</p>}\n//       </div>\n//       {Object.keys(interpretations).length > 0 && (\n//         <div\n//           style={{\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//           }}\n//         >\n//           <h2>Interpretations</h2>\n//           {Object.entries(interpretations).map(([header, interpretation]) => (\n//             <div key={header}>\n//               <strong>{header}:</strong> {interpretation}\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Header_Interpret;","map":{"version":3,"names":[],"sources":["/Users/acecanacan/my-react-app/src/components/header_interpret.js"],"sourcesContent":["// import { useState, useEffect, useCallback, useMemo } from \"react\";\n// const { Configuration, OpenAIApi } = require(\"openai\");\n\n// const Header_Interpret = () => {\n//   // Memoize the openai object to avoid re-initialization on every render\n//   const openai = useMemo(() => {\n//     const configuration = new Configuration({\n//       apiKey: \"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\",\n//     });\n//     return new OpenAIApi(configuration);\n//   }, []);\n\n//   const [csvHeaders, setCsvHeaders] = useState([]); // We'll keep this assuming you will use it elsewhere\n//   const [interpretations, setInterpretations] = useState({});\n//   const [loading, setLoading] = useState(false);\n\n//   const interpretHeader = useCallback(async (header) => {\n//     const result = await openai.createCompletion({\n//       model: \"text-davinci-003\",\n//       prompt: `Interpret the column header \"${header}\" in a CSV file.`,\n//       temperature: 0.5,\n//       max_tokens: 100,\n//     });\n//     return result.data.choices[0].text.trim();\n//   }, [openai]);\n//  // Added openai to the dependency array\n  \n\n//   useEffect(() => {\n//     const fetchInterpretations = async () => {\n//       setLoading(true);\n//       const newInterpretations = {};\n\n//       for (const header of csvHeaders) {\n//         newInterpretations[header] = await interpretHeader(header);\n//       }\n\n//       setInterpretations(newInterpretations);\n//       setLoading(false);\n//     };\n\n//     if (csvHeaders.length > 0) {\n//       fetchInterpretations();\n//     }\n//   }, [csvHeaders, interpretHeader]);\n\n//   return (\n//     <>\n//       <div\n//         style={{\n//           display: \"flex\",\n//           flexDirection: \"column\",\n//           justifyContent: \"center\",\n//           alignItems: \"center\",\n//           height: \"100vh\",\n//         }}\n//       >\n//         {/* Your existing form can stay here */}\n//         {loading && <p>Loading interpretations...</p>}\n//       </div>\n//       {Object.keys(interpretations).length > 0 && (\n//         <div\n//           style={{\n//             display: \"flex\",\n//             flexDirection: \"column\",\n//             justifyContent: \"center\",\n//             alignItems: \"center\",\n//           }}\n//         >\n//           <h2>Interpretations</h2>\n//           {Object.entries(interpretations).map(([header, interpretation]) => (\n//             <div key={header}>\n//               <strong>{header}:</strong> {interpretation}\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </>\n//   );\n// };\n\n// export default Header_Interpret;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}