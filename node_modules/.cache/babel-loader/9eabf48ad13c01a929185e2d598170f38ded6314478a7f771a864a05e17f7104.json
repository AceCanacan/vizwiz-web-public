{"ast":null,"code":"var _jsxFileName = \"/Users/acecanacan/my-react-app/src/components/header_interpret.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = 'your-api-key-here'; // Replace with your actual API key\n\nconst Header_Interpret = ({\n  csvHeaders\n}) => {\n  _s();\n  const [interpretations, setInterpretations] = useState({});\n  const [datasetInterpretation, setDatasetInterpretation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const interpretHeader = useCallback(async header => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Interpret the CSV column header \"${header}\" in a very brief but detailed manner. Not more than two sentences`\n      };\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [systemMessage]\n      }, {\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      var _error$response;\n      console.error('Error response from OpenAI:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      return 'Error interpreting header';\n    }\n  }, []);\n  const interpretDataset = useCallback(async () => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Provide an overall interpretation of a dataset in 2 sentences: ${csvHeaders.join(', ')}`\n      };\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [systemMessage]\n      }, {\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      var _error$response2;\n      console.error('Error response from OpenAI:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      return 'Error interpreting dataset';\n    }\n  }, [csvHeaders]);\n  const interpretExtendedDataset = useCallback(async () => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Provide a more detailed interpretation of the dataset in 2-3 sentences based on the headers: ${csvHeaders.join(', ')}`\n      };\n      const response = await axios.post(API_URL, {\n        model: 'gpt-3.5-turbo',\n        messages: [systemMessage]\n      }, {\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      var _error$response3;\n      console.error('Error response from OpenAI:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n      return 'Error interpreting extended dataset';\n    }\n  }, [csvHeaders]);\n  const interpretHeadersAndDataset = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const headerPromises = csvHeaders.map(header => interpretHeader(header));\n      const [headerResults, datasetResult] = await Promise.all([Promise.all(headerPromises), interpretDataset()]);\n      const newInterpretations = {};\n      csvHeaders.forEach((header, index) => {\n        newInterpretations[header] = headerResults[index];\n      });\n      setInterpretations(newInterpretations);\n      setDatasetInterpretation(datasetResult);\n    } catch (e) {\n      setError('An error occurred while interpreting the data.');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: interpretHeadersAndDataset,\n      children: \"Interpret Headers and Dataset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading interpretations...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }, this), datasetInterpretation && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Overall Dataset Interpretation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: datasetInterpretation,\n        onChange: e => setDatasetInterpretation(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), Object.keys(interpretations).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Header Interpretations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), Object.entries(interpretations).map(([header, interpretation]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [header, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: interpretation,\n          onChange: e => {\n            setInterpretations({\n              ...interpretations,\n              [header]: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this)]\n      }, header, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(Header_Interpret, \"QBph6zq+ZZesmphHOuO2CnP8aJU=\");\n_c = Header_Interpret;\nexport default Header_Interpret;\nvar _c;\n$RefreshReg$(_c, \"Header_Interpret\");","map":{"version":3,"names":["React","useState","useCallback","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","API_KEY","Header_Interpret","csvHeaders","_s","interpretations","setInterpretations","datasetInterpretation","setDatasetInterpretation","loading","setLoading","error","setError","interpretHeader","header","systemMessage","role","content","response","post","model","messages","headers","Authorization","data","choices","message","trim","_error$response","console","interpretDataset","join","_error$response2","interpretExtendedDataset","_error$response3","interpretHeadersAndDataset","headerPromises","map","headerResults","datasetResult","Promise","all","newInterpretations","forEach","index","e","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","Object","keys","length","entries","interpretation","type","_c","$RefreshReg$"],"sources":["/Users/acecanacan/my-react-app/src/components/header_interpret.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport axios from 'axios';\n\nconst API_URL = 'https://api.openai.com/v1/chat/completions';\nconst API_KEY = 'your-api-key-here'; // Replace with your actual API key\n\nconst Header_Interpret = ({ csvHeaders }) => {\n  const [interpretations, setInterpretations] = useState({});\n  const [datasetInterpretation, setDatasetInterpretation] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const interpretHeader = useCallback(async (header) => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Interpret the CSV column header \"${header}\" in a very brief but detailed manner. Not more than two sentences`,\n      };\n      const response = await axios.post(\n        API_URL,\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [systemMessage],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      console.error('Error response from OpenAI:', error.response?.data);\n      return 'Error interpreting header';\n    }\n  }, []);\n\n  const interpretDataset = useCallback(async () => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Provide an overall interpretation of a dataset in 2 sentences: ${csvHeaders.join(', ')}`,\n      };\n      const response = await axios.post(\n        API_URL,\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [systemMessage],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      console.error('Error response from OpenAI:', error.response?.data);\n      return 'Error interpreting dataset';\n    }\n  }, [csvHeaders]);\n\n  const interpretExtendedDataset = useCallback(async () => {\n    try {\n      const systemMessage = {\n        role: 'system',\n        content: `Provide a more detailed interpretation of the dataset in 2-3 sentences based on the headers: ${csvHeaders.join(', ')}`,\n      };\n      const response = await axios.post(\n        API_URL,\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [systemMessage],\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      return response.data.choices[0].message.content.trim();\n    } catch (error) {\n      console.error('Error response from OpenAI:', error.response?.data);\n      return 'Error interpreting extended dataset';\n    }\n  }, [csvHeaders]);\n\n  const interpretHeadersAndDataset = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const headerPromises = csvHeaders.map(header => interpretHeader(header));\n      const [headerResults, datasetResult] = await Promise.all([\n        Promise.all(headerPromises),\n        interpretDataset(),\n      ]);\n\n      const newInterpretations = {};\n      csvHeaders.forEach((header, index) => {\n        newInterpretations[header] = headerResults[index];\n      });\n\n      setInterpretations(newInterpretations);\n      setDatasetInterpretation(datasetResult);\n      \n    } catch (e) {\n      setError('An error occurred while interpreting the data.');\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <button onClick={interpretHeadersAndDataset}>Interpret Headers and Dataset</button>\n      {loading && <p>Loading interpretations...</p>}\n      {datasetInterpretation && (\n        <div>\n          <h2>Overall Dataset Interpretation</h2>\n          <textarea\n            value={datasetInterpretation}\n            onChange={(e) => setDatasetInterpretation(e.target.value)}\n          />\n        </div>\n      )}\n      {Object.keys(interpretations).length > 0 && (\n        <div>\n          <h2>Header Interpretations</h2>\n          {Object.entries(interpretations).map(([header, interpretation]) => (\n            <div key={header}>\n              <strong>{header}:</strong>\n              <input\n                type=\"text\"\n                value={interpretation}\n                onChange={(e) => {\n                  setInterpretations({\n                    ...interpretations,\n                    [header]: e.target.value,\n                  });\n                }}\n              />\n            </div>\n          ))}\n        </div>\n      )}\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Header_Interpret;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,OAAO,GAAG,4CAA4C;AAC5D,MAAMC,OAAO,GAAG,mBAAmB,CAAC,CAAC;;AAErC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACc,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtE,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMoB,eAAe,GAAGnB,WAAW,CAAC,MAAOoB,MAAM,IAAK;IACpD,IAAI;MACF,MAAMC,aAAa,GAAG;QACpBC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAG,oCAAmCH,MAAO;MACtD,CAAC;MACD,MAAMI,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAC/BnB,OAAO,EACP;QACEoB,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAACN,aAAa;MAC1B,CAAC,EACD;QACEO,OAAO,EAAE;UACPC,aAAa,EAAG,UAAStB,OAAQ,EAAC;UAClC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MACD,OAAOiB,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA,IAAAiB,eAAA;MACdC,OAAO,CAAClB,KAAK,CAAC,6BAA6B,GAAAiB,eAAA,GAAEjB,KAAK,CAACO,QAAQ,cAAAU,eAAA,uBAAdA,eAAA,CAAgBJ,IAAI,CAAC;MAClE,OAAO,2BAA2B;IACpC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,gBAAgB,GAAGpC,WAAW,CAAC,YAAY;IAC/C,IAAI;MACF,MAAMqB,aAAa,GAAG;QACpBC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAG,kEAAiEd,UAAU,CAAC4B,IAAI,CAAC,IAAI,CAAE;MACnG,CAAC;MACD,MAAMb,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAC/BnB,OAAO,EACP;QACEoB,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAACN,aAAa;MAC1B,CAAC,EACD;QACEO,OAAO,EAAE;UACPC,aAAa,EAAG,UAAStB,OAAQ,EAAC;UAClC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MACD,OAAOiB,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA,IAAAqB,gBAAA;MACdH,OAAO,CAAClB,KAAK,CAAC,6BAA6B,GAAAqB,gBAAA,GAAErB,KAAK,CAACO,QAAQ,cAAAc,gBAAA,uBAAdA,gBAAA,CAAgBR,IAAI,CAAC;MAClE,OAAO,4BAA4B;IACrC;EACF,CAAC,EAAE,CAACrB,UAAU,CAAC,CAAC;EAEhB,MAAM8B,wBAAwB,GAAGvC,WAAW,CAAC,YAAY;IACvD,IAAI;MACF,MAAMqB,aAAa,GAAG;QACpBC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAG,gGAA+Fd,UAAU,CAAC4B,IAAI,CAAC,IAAI,CAAE;MACjI,CAAC;MACD,MAAMb,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAC/BnB,OAAO,EACP;QACEoB,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAACN,aAAa;MAC1B,CAAC,EACD;QACEO,OAAO,EAAE;UACPC,aAAa,EAAG,UAAStB,OAAQ,EAAC;UAClC,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MACD,OAAOiB,QAAQ,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACT,OAAO,CAACU,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA,IAAAuB,gBAAA;MACdL,OAAO,CAAClB,KAAK,CAAC,6BAA6B,GAAAuB,gBAAA,GAAEvB,KAAK,CAACO,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBV,IAAI,CAAC;MAClE,OAAO,qCAAqC;IAC9C;EACF,CAAC,EAAE,CAACrB,UAAU,CAAC,CAAC;EAEhB,MAAMgC,0BAA0B,GAAG,MAAAA,CAAA,KAAY;IAC7CzB,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMwB,cAAc,GAAGjC,UAAU,CAACkC,GAAG,CAACvB,MAAM,IAAID,eAAe,CAACC,MAAM,CAAC,CAAC;MACxE,MAAM,CAACwB,aAAa,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDD,OAAO,CAACC,GAAG,CAACL,cAAc,CAAC,EAC3BN,gBAAgB,CAAC,CAAC,CACnB,CAAC;MAEF,MAAMY,kBAAkB,GAAG,CAAC,CAAC;MAC7BvC,UAAU,CAACwC,OAAO,CAAC,CAAC7B,MAAM,EAAE8B,KAAK,KAAK;QACpCF,kBAAkB,CAAC5B,MAAM,CAAC,GAAGwB,aAAa,CAACM,KAAK,CAAC;MACnD,CAAC,CAAC;MAEFtC,kBAAkB,CAACoC,kBAAkB,CAAC;MACtClC,wBAAwB,CAAC+B,aAAa,CAAC;IAEzC,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVjC,QAAQ,CAAC,gDAAgD,CAAC;IAC5D;IAEAF,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACEb,OAAA,CAAAE,SAAA;IAAA+C,QAAA,gBACEjD,OAAA;MAAQkD,OAAO,EAAEZ,0BAA2B;MAAAW,QAAA,EAAC;IAA6B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAClF1C,OAAO,iBAAIZ,OAAA;MAAAiD,QAAA,EAAG;IAA0B;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5C5C,qBAAqB,iBACpBV,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAAiD,QAAA,EAAI;MAA8B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvCtD,OAAA;QACEuD,KAAK,EAAE7C,qBAAsB;QAC7B8C,QAAQ,EAAGR,CAAC,IAAKrC,wBAAwB,CAACqC,CAAC,CAACS,MAAM,CAACF,KAAK;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,EACAI,MAAM,CAACC,IAAI,CAACnD,eAAe,CAAC,CAACoD,MAAM,GAAG,CAAC,iBACtC5D,OAAA;MAAAiD,QAAA,gBACEjD,OAAA;QAAAiD,QAAA,EAAI;MAAsB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC9BI,MAAM,CAACG,OAAO,CAACrD,eAAe,CAAC,CAACgC,GAAG,CAAC,CAAC,CAACvB,MAAM,EAAE6C,cAAc,CAAC,kBAC5D9D,OAAA;QAAAiD,QAAA,gBACEjD,OAAA;UAAAiD,QAAA,GAAShC,MAAM,EAAC,GAAC;QAAA;UAAAkC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1BtD,OAAA;UACE+D,IAAI,EAAC,MAAM;UACXR,KAAK,EAAEO,cAAe;UACtBN,QAAQ,EAAGR,CAAC,IAAK;YACfvC,kBAAkB,CAAC;cACjB,GAAGD,eAAe;cAClB,CAACS,MAAM,GAAG+B,CAAC,CAACS,MAAM,CAACF;YACrB,CAAC,CAAC;UACJ;QAAE;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,GAXMrC,MAAM;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYX,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,EACAxC,KAAK,iBAAId,OAAA;MAAAiD,QAAA,EAAInC;IAAK;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eACxB,CAAC;AAEP,CAAC;AAAC/C,EAAA,CAlJIF,gBAAgB;AAAA2D,EAAA,GAAhB3D,gBAAgB;AAoJtB,eAAeA,gBAAgB;AAAC,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}